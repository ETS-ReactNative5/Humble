<!--#include virtual="/pages/includes/header.html" -->
<!--#include virtual="/pages/includes/container.html" -->
<table style="width: 80%; margin-left: auto; margin-right: auto">
    <tr>
        <td><a href="#" onclick="window.history.back()">Back</a></td>
        <td style="text-align: center"><a href="/pages/Main.htmls">Home</a></td>
        <td style="text-align: right"><a href="Polyglot.htmls" title="" >Next</a></td>
    </tr>
</table>
<div style='width: 80%; margin-left: auto; margin-right: auto; text-align: justify'>
<div class='humble-topic-header'>Introduction to the Unity ORM</div>
The Humble Framework uses the Unity ORM (Object-Relational Mapping) Class.  This class can access MySQL, MongoDB, or both in a Polyglot fashion. 
This first page on the Unity ORM will only cover the basic uses, while the next page will cover the Polyglot features.

<br /><br />

<div class="humble-section-header">Convention Over Configuration</div>

Unity operates on entities, which at their simplest are just MySQL tables.  These entities, however, must be defined in the following manner and <i><b>it is not negotiable!</b></i>
Unity does a lot for you.  You don't need to generate classes, or maintain vast configuration files to perform all the basic Create, Read, Update, and Delete (CRUD) functions.  Plus
the pagination features for Unity are absolutely the easiest there are.  But what Unity requires are the following three things:
<br /><br />
<ul>
    1) You will name your tables using the following format:
    <ul>
        <b><i>namespace</i>_table_name</b>
    </ul>
    2) Every entity will be defined with the following fields:
    <ul>
    <div widget="codeBox" widgetScroll="100%" lang="sql" lexicon="/pages/js/lang/Unity/schema.json" source="/pages/code/Unity/schema.txt" class="humble-code">

    </div>
    </ul>    
</ul>



</div>
<!--#include virtual="/pages/includes/footer.html" -->